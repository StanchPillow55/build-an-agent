"""
Packaging utility for creating unified ZIP exports of curriculum materials.

Provides functionality to package lesson plans, presentations, and notes into
a single ZIP file for easy distribution and archiving.
"""

import json
import zipfile
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime


def create_readme_content(plan: Dict[str, Any]) -> str:
    """
    Create README content for the packaged curriculum materials.

    Args:
        plan: Curriculum plan dictionary

    Returns:
        README content as string
    """
    lesson_title = plan.get("lesson_title", "Curriculum Package")
    grade_level = plan.get("grade_level", "Unknown Grade")
    subject = plan.get("subject", "Unknown Subject")
    objectives = plan.get("learning_objectives", [])

    readme_content = f"""# {lesson_title}

## Course Information
- **Grade Level**: {grade_level}
- **Subject**: {subject}
- **Generated**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Learning Objectives
"""

    for i, objective in enumerate(objectives, 1):
        readme_content += f"{i}. {objective}\n"

    readme_content += """
## Package Contents

This curriculum package contains the following files:

- **lesson_plan.json** - Complete lesson plan in JSON format
- **presentation.pptx** - PowerPoint presentation slides (if generated)
- **notes.txt** - Additional notes and materials (if provided)
- **README.md** - This documentation file

## Usage

1. Review the lesson plan in `lesson_plan.json` for detailed curriculum structure
2. Use `presentation.pptx` for classroom presentation
3. Refer to `notes.txt` for additional teaching materials and guidance

Generated by Educator Agent - AI-powered curriculum planning tool.
"""

    return readme_content


def package_outputs(
    plan_json_path: Optional[Path] = None,
    pptx_path: Optional[Path] = None,
    notes_path: Optional[Path] = None,
    out_zip: Path = Path("curriculum_package.zip"),
    plan_data: Optional[Dict[str, Any]] = None,
) -> Path:
    """
    Package curriculum outputs into a unified ZIP file.

    Args:
        plan_json_path: Path to the JSON lesson plan file
        pptx_path: Path to the PowerPoint presentation file
        notes_path: Path to additional notes file
        out_zip: Path for the output ZIP file
        plan_data: Optional curriculum plan data for README generation

    Returns:
        Absolute path to the created ZIP file

    Raises:
        FileNotFoundError: If required input files don't exist
        PermissionError: If unable to create ZIP file
    """
    # Ensure output directory exists
    out_zip.parent.mkdir(parents=True, exist_ok=True)

    # Track files to include
    files_to_zip = []

    # Validate and collect input files
    if plan_json_path and plan_json_path.exists():
        files_to_zip.append((plan_json_path, "lesson_plan.json"))
    elif plan_json_path:
        print(f"Warning: JSON plan file not found: {plan_json_path}")

    if pptx_path and pptx_path.exists():
        files_to_zip.append((pptx_path, "presentation.pptx"))
    elif pptx_path:
        print(f"Warning: PowerPoint file not found: {pptx_path}")

    if notes_path and notes_path.exists():
        files_to_zip.append((notes_path, "notes.txt"))
    elif notes_path:
        print(f"Warning: Notes file not found: {notes_path}")

    # Check if we have any files to package
    if not files_to_zip and not plan_data:
        raise ValueError(
            "No files found to package. At least one input file must exist."
        )

    # Create the ZIP file
    with zipfile.ZipFile(out_zip, "w", zipfile.ZIP_DEFLATED) as zipf:
        # Add input files
        for file_path, archive_name in files_to_zip:
            zipf.write(file_path, archive_name)
            print(f"Added {archive_name} to package")

        # Create and add README
        readme_content = ""
        if plan_data:
            readme_content = create_readme_content(plan_data)
        elif plan_json_path and plan_json_path.exists():
            # Try to load plan data from JSON file
            try:
                with open(plan_json_path, "r", encoding="utf-8") as f:
                    plan_data = json.load(f)
                readme_content = create_readme_content(plan_data)
            except (json.JSONDecodeError, IOError) as e:
                print(f"Warning: Could not read plan data for README: {e}")
                readme_content = "# Curriculum Package\n\nGenerated by Educator Agent"
        else:
            readme_content = "# Curriculum Package\n\nGenerated by Educator Agent"

        # Add README to ZIP
        zipf.writestr("README.md", readme_content)
        print("Added README.md to package")

    abs_path = out_zip.absolute()
    print(f"‚úÖ Package created successfully: {abs_path}")
    return abs_path


def main():
    """Test the packager with sample data."""
    from tempfile import TemporaryDirectory

    print("üéØ Testing Packager Module")
    print("=" * 40)

    # Create temporary test files
    with TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Create sample JSON plan
        sample_plan = {
            "lesson_title": "Introduction to Environmental Science",
            "grade_level": "8th Grade",
            "subject": "Environmental Science",
            "learning_objectives": [
                "Students will define what an ecosystem is",
                "Students will identify biotic and abiotic factors",
                "Students will explain food chains and energy flow",
            ],
            "content_outline": [
                {
                    "title": "What is an Ecosystem?",
                    "description": "Introduce ecosystem concepts",
                }
            ],
            "suggested_assessments": [
                "Ecosystem identification worksheet",
                "Exit ticket with vocabulary",
            ],
        }

        # Create test files
        json_file = temp_path / "test_plan.json"
        with open(json_file, "w") as f:
            json.dump(sample_plan, f, indent=2)

        notes_file = temp_path / "test_notes.txt"
        with open(notes_file, "w") as f:
            f.write(
                "Additional teaching notes:\n- Use visual aids\n- Encourage discussion"
            )

        # Test packaging
        output_zip = temp_path / "test_package.zip"

        try:
            result_path = package_outputs(
                plan_json_path=json_file,
                notes_path=notes_file,
                out_zip=output_zip,
                plan_data=sample_plan,
            )

            print(f"\nüì¶ Package created at: {result_path}")
            print(f"üìä File size: {result_path.stat().st_size} bytes")

            # Verify ZIP contents
            with zipfile.ZipFile(result_path, "r") as zipf:
                contents = zipf.namelist()
                print(f"üìã Package contents: {', '.join(contents)}")

            print("\n‚úÖ Packager test completed successfully!")

        except Exception as e:
            print(f"\n‚ùå Packager test failed: {e}")


if __name__ == "__main__":
    main()
